        -:    0:Source:funcs.cpp
        -:    0:Graph:funcs.gcno
        -:    0:Data:funcs.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:*  funcs.cpp
        -:    3:*  Lab2
        -:    4:*
        -:    5:*  Created by Lukas Ferreira on 14/09/16.
        -:    6:*  Copyright © 2016 Lukas Ferreira. All rights reserved.
        -:    7:*/
        -:    8:
        -:    9:#include "funcs.hpp"
        -:   10:using namespace Add;
        -:   11:
        -:   12:/* Descrição:
        -:   13: Retorna o numero decimal de acordo com o caracter romano
        -:   14: Parâmetros:
        -:   15: roman - char romano a ser convertido para decimal
        -:   16: Retorno:
        -:   17: int - decimal do numero romano
        -:   18: */
        -:   19:
        -:   20:int Addition::value(char roman)
        -:   21:{
     1618:   22:    switch(roman)
        -:   23:    {
      166:   24:        case 'I':return 1;
       44:   25:        case 'V':return 5;
      412:   26:        case 'X':return 10;
       88:   27:        case 'L':return 50;
      360:   28:        case 'C':return 100;
       78:   29:        case 'D':return 500;
      258:   30:        case 'M':return 1000;
       60:   31:        case 'i':return 1;
    #####:   32:        case 'v':return 5;
       30:   33:        case 'x':return 10;
       14:   34:        case 'l':return 50;
       30:   35:        case 'c':return 100;
    #####:   36:        case 'd':return 500;
       42:   37:        case 'm':return 1000;
        -:   38:            
       36:   39:        default: return 0;  /* Se o caracter nao for valido */
        -:   40:    }
     1618:   41:}
        -:   42:
        -:   43:/* Descrição:
        -:   44: Converte um numero romano para decimal
        -:   45: Parâmetros:
        -:   46: input - referencia para a string do numero romano
        -:   47: Retorno:
        -:   48: int - numero romano em sua forma decimal
        -:   49: */
        -:   50:
        -:   51:int Addition::from_roman(const string& input)
        -:   52:{
       62:   53:    int sum = 0;
       62:   54:    int count = 1;
       62:   55:    char prev = input[input.length() - 1];
        -:   56:    char aux;
       62:   57:    string result = "";
       62:   58:    string result_prev = "";
        -:   59:    
      236:   60:    if ((value(prev) < 1) || ((input.length() - 1) > 30) || ((input.length() - 1) < 1)) {
        6:   61:        return -1;
        -:   62:    }
        -:   63:    
      476:   64:    for(int i = int((input.length() - 2)); i >= 0; i--)
        -:   65:    {
        -:   66:        /* Caracter Invalido */
        -:   67:        
      432:   68:        if (value(prev) < 1)
        -:   69:        {
    #####:   70:            return  -1;
        -:   71:        }
        -:   72:        
      432:   73:        if (prev == input[i])
        -:   74:        {
       58:   75:            count++;
       58:   76:        } else {
      158:   77:            count = 1;
        -:   78:        }
        -:   79:        
     1902:   80:        if ((toupper(input[i]) == 'V' || toupper(input[i]) == 'L' || toupper(input[i]) == 'D') && count > 1)
        -:   81:        {
        8:   82:            return -1;
        -:   83:        }
        -:   84:        
     1898:   85:        if ((toupper(input[i]) == 'I' || toupper(input[i]) == 'X' || toupper(input[i]) == 'C' || toupper(input[i]) == 'M') && count > 3)
        -:   86:        {
        4:   87:            return -1;
        -:   88:        }
        -:   89:        /* Verifica com o auxilio de it_contains se
        -:   90:         a sequencia de numeros romanos desejada existe
        -:   91:         */
      816:   92:        if(value(input[i]) < value(prev)) {
      228:   93:            aux = toupper(input[i]);
       76:   94:            result += aux;
      152:   95:            result += toupper(prev);
       76:   96:            result_prev = result;
      304:   97:            if (((it_contains(result)) == false)) {
        8:   98:                return -1;
        -:   99:            }
       68:  100:            result = "";
       68:  101:        }
        -:  102:        /* Verifica se a sequencia de numeros romanos e do tipo
        -:  103:         CM, CD, XC, XL, IX, IV ou se e outro qualquer numero romano.
        -:  104:         
        -:  105:         No primeiro caso, subtraimos o segundo numero romano do primeiro, ou seja,
        -:  106:         M - C = 900
        -:  107:         D - C = 400
        -:  108:         C - X = 90
        -:  109:         L - X = 40
        -:  110:         X - I = 9
        -:  111:         V - I = 4
        -:  112:         
        -:  113:         No segundo caso, apenas somamos o numero romano na soma total dado por sum
        -:  114:         */
      920:  115:        if((value(input[i]) < value(prev)) && (input[i] != prev)) {
      272:  116:            sum += (value(prev) - value(input[i]));
      136:  117:            prev = input[i];
       68:  118:        } else {
      128:  119:            if (i == int((input.length() - 2))) {
       40:  120:                sum += value(prev) + value(input[i]);
      660:  121:            } else if ((value(input[i - 1]) < value(input[i])) && ((i - 1) >= 0)) {
       38:  122:                sum += 0;
       38:  123:            } else {
      240:  124:                sum += value(input[i]);
        -:  125:            }
      256:  126:            prev = input[i];
        -:  127:        }
        -:  128:        
     1184:  129:        if ((it_contains(result_prev) == true) && value(input[i - 1]) < sum) {
       14:  130:            return -1;
        -:  131:        }
      182:  132:        result_prev = "";
      182:  133:    }
        -:  134:    /* Retorna -1 se a soma for maior que 3000, a soma do contrario */
       66:  135:    return (sum > 3000 ? -1 : sum);
      124:  136:}
        -:  137:
        -:  138:/* Descrição:
        -:  139: Verifica se o numero romano e 900 ou 400 ou 90 ou 9 ou 4
        -:  140: Parâmetros:
        -:  141: input - numero romano a ser verificado
        -:  142: Retorno:
        -:  143: True se o numero romano existir, False do contrario
        -:  144: */
        -:  145:
        -:  146:bool Addition::it_contains (string input)
        -:  147:{
      292:  148:    string result;
        -:  149:    struct romandata_t { int value; char const* numeral; };
        -:  150:    /* Look-up table para os numeros validos */
        -:  151:    static romandata_t const romandata[] = {
        -:  152:        {900, "CM"},
        -:  153:        {400, "CD"},
        -:  154:        {90, "XC"},
        -:  155:        {40, "XL"},
        -:  156:        {9, "IX"},
        -:  157:        {4, "IV"},
        -:  158:        {900, "cm"},
        -:  159:        {400, "cd"},
        -:  160:        {90, "xc"},
        -:  161:        {40, "xl"},
        -:  162:        {9, "ix"},
        -:  163:        {4, "iv"},
        -:  164:        {0, NULL} };
        -:  165:
     4752:  166:    for (romandata_t const* current = romandata; current->numeral != NULL; ++current)
        -:  167:    {
        -:  168:        
     2234:  169:        if (input == current->numeral)
        -:  170:        {
      150:  171:            return true;
        -:  172:        }
     2084:  173:    }
        -:  174:
      142:  175:    return false;
      292:  176:}
